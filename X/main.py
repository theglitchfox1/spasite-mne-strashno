import telebot
import sqlite3
import threading
import time
from datetime import datetime

bot = telebot.TeleBot("7307622759:AAEMHB6SqT79lHs9GgNcJXivC96yOWf8TKs")  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        task TEXT,
        category TEXT DEFAULT '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        is_completed BOOLEAN DEFAULT FALSE
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_id INTEGER,
        reminder_time TEXT,
        FOREIGN KEY (task_id) REFERENCES tasks(id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
init_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
def check_reminders():
    while True:
        conn = sqlite3.connect('todo_bot.db')
        cursor = conn.cursor()
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        # –ò—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        cursor.execute('''
        SELECT reminders.task_id, tasks.user_id, tasks.task 
        FROM reminders 
        JOIN tasks ON reminders.task_id = tasks.id 
        WHERE reminders.reminder_time <= ?
        ''', (now,))
        
        reminders = cursor.fetchall()
        
        for reminder in reminders:
            task_id, user_id, task_text = reminder
            bot.send_message(
                user_id,
                f" –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}"
            )
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            cursor.execute("DELETE FROM reminders WHERE task_id = ?", (task_id,))
        
        conn.commit()
        conn.close()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_thread = threading.Thread(target=check_reminders)
reminder_thread.daemon = True
reminder_thread.start()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        " *To-Do Bot*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        "/done [–Ω–æ–º–µ—Ä] - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/delete [–Ω–æ–º–µ—Ä] - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/remind [–Ω–æ–º–µ—Ä] [–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/add –†–∞–±–æ—Ç–∞ –°–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç\n"
        "/remind 1 2025-12-31 23:59",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def add_task(message):
    try:
        _, category, *task_parts = message.text.split(maxsplit=2)
        task_text = ' '.join(task_parts)
    except ValueError:
        bot.reply_to(message, " –§–æ—Ä–º–∞—Ç: /add [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–∑–∞–¥–∞—á–∞]")
        return

    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO tasks (user_id, task, category) VALUES (?, ?, ?)",
        (message.chat.id, task_text, category)
    )
    conn.commit()
    conn.close()
    bot.reply_to(message, f" –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{category}': {task_text}")

# –ö–æ–º–∞–Ω–¥–∞ /list
@bot.message_handler(commands=['list'])
def list_tasks(message):
    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, task, category, is_completed FROM tasks WHERE user_id = ?",
        (message.chat.id,)
    )
    tasks = cursor.fetchall()
    conn.close()

    if not tasks:
        bot.send_message(message.chat.id, "üóë –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return

    tasks_by_category = {}
    for task in tasks:
        task_id, task_text, category, is_completed = task
        if category not in tasks_by_category:
            tasks_by_category[category] = []
        status = "‚úÖ" if is_completed else "‚ùå"
        tasks_by_category[category].append(f"{task_id}. {task_text} {status}")

    response = [" *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*"]
    for category, tasks_list in tasks_by_category.items():
        response.append(f"\n*{category}*")
        response.extend(tasks_list)
    
    bot.send_message(message.chat.id, "\n".join(response), parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /done
@bot.message_handler(commands=['done'])
def mark_done(message):
    try:
        task_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.reply_to(message, " –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /done [–Ω–æ–º–µ—Ä]")
        return
    
    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE tasks SET is_completed = TRUE WHERE id = ? AND user_id = ?",
        (task_id, message.chat.id)
    )
    conn.commit()
    conn.close()
    bot.reply_to(message, f" –ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /delete
@bot.message_handler(commands=['delete'])
def delete_task(message):
    try:
        task_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.reply_to(message, " –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /delete [–Ω–æ–º–µ—Ä]")
        return
    
    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM tasks WHERE id = ? AND user_id = ?",
        (task_id, message.chat.id)
    )
    conn.commit()
    conn.close()
    bot.reply_to(message, f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /remind
@bot.message_handler(commands=['remind'])
def set_reminder(message):
    try:
        _, task_id, reminder_time = message.text.split(maxsplit=2)
        task_id = int(task_id)
    except ValueError:
        bot.reply_to(message, " –§–æ—Ä–º–∞—Ç: /remind [–Ω–æ–º–µ—Ä] [–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º]")
        return

    conn = sqlite3.connect('todo_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
    cursor.execute(
        "SELECT id FROM tasks WHERE id = ? AND user_id = ?",
        (task_id, message.chat.id)
    )
    if not cursor.fetchone():
        bot.reply_to(message, "–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        conn.close()
        return
    
    cursor.execute(
        "INSERT INTO reminders (task_id, reminder_time) VALUES (?, ?)",
        (task_id, reminder_time)
    )
    conn.commit()
    conn.close()
    bot.reply_to(message, f" –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling()